const sampleInput = `>>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>`;
const input = `>>>><<>>>><<><<<>>><<<>><<>>><<>>>><<<>>><<<>><<<<>>>><<<<>>>><<<>>>><<<<><><>>><<<<>><>>>><<<><<<>><<<<><>><<><<<<>>><>>>><>><>><<><<<><<<<>>><<<>><<<<><<<<>><<<<>><<>><<><>><>>>><><<<><>>><>>><<<><<<<>><<>>>><<<><<<>>><<<<>>><<<>><<>><<<>>><<<>><<<<>>><>><<<<>>>><<<<>>><>>>><>><>>>><<<<><>>><<<<>>><><<<<><<<><>>><<>>>><<<<>>>><<<>><<<<>>><><<>>><<><<><<>>><<<<>>><<<<>>><<<<><<<><<<><<>><<>><><<<><<>>>><<>><<>>>><<<<><<<<>><<<>>>><<>>>><<<<>>><<>><<><<<>>>><<><<>>><<<>><>>><>><<<<>>>><>><><<<<>>><>>><<>>>><<<><>>><>>><<<>><<>>>><<><<>>>><>><>>><<<>><<<>><<<>>><<<<><<<<>>><<>>><<>>>><>><>><<<>>>><<<<>>><<><<>><<>><<<<>>><<>>>><<>>><<<<>>>><>><<<>><>>><<>><<>>>><>><<>>><<<<><<<>>><<<<>>><>>>><<<><<<>>><<<>><<<>><<<<>>><>>><><>><>><>><<<><>>><<<>>><><<<<><<<>>>><><>>>><<>>>><<<>>><<<<>>><<>>>><<<><<>>>><>>><<<><>>>><<<<>><<<><<<>>><<<><<><<>>><<<>><<<><<<<>>><<>><<>>><>><><<<><<><>>><<<>><<>><<<><<<>><<<<><>><<<>>>><<<<>>>><>><<<<>>>><<<<>>><<<><<>><<>><<<><<<<><<<>>>><<><<<>>><<<<><<<><<<<>><<<<><>><<<<>>>><>><<<<><<<<>>><<<<>><<<<>>><<<<>><<>>>><<><<<><>>>><<<<><<<>>>><<>>>><<>>><<<<>><><<<>>>><<>>><>>><<<<>><<><<>>><>>>><>><<<>>>><<<<>>>><<<<>>>><<<>>><><<<><>><<<>>><<<><<<>>>><<<<><<<>>><<<<><<><>>><<<>><<<>>><<<<>>><<<<><<<>><>>>><<<>><>><<<<>><<>><>>>><>>>><<>><<>>>><<<<>>><<<>>><<><<<>>><<>><<<<>>>><<<>><<<<>><><>>><<<<>>><<<>>>><><>>>><<<<>>><<<<>><<<>>><>>><<<><><<>>><>>><<<<>><<<>>>><><<<<>><<>>><<<><<<<><<<><<<><>><<<>>><<<><<>><>><<<<>><<<<>>><<>><<<<>><<><<><<<<>>><<<>><<<>>>><>>><<>><<<<>><<<<>>><<<><>>>><<<>>><<<<><<<<>>>><<><<<<><<<>>>><<>>><>><<>><<<<>>>><><<<<>><<<>><<<><>>><<<<>>><<>>>><><<>>>><<<<>>><<<>>>><<<><<<<>>><<<<>>>><<<><<<>>>><><>><>><<>><<<>>><>>>><>><<>>><<>>>><<<>>>><<<>>>><<<>>>><<<<>>><>>>><<<><<<<>>>><>><<<><<<>>><<>>><<<<>><<<<>>>><>>>><<>>><<><>><>>><<<>>>><<<>>><<<>><<<>>>><<>><<<<>>><<<>>><<<<>><<<<>>><<>><<<>><<<>>><<>>>><>><<>><<<<>>>><<>>>><><<<>>><><><<>>>><<<>><><<><<<<>>>><<<<>><<<<>><><<<<>>>><><<><>>>><>><><>>>><<<<>>><<<<><<>><<<<><<><>>>><<>><>><>>><<><<><<>><<>>>><<<<>>>><>><<<<>>>><<<>><<<><<<>><<<<>><>><<>>><>><>>><<<>>><<<>><<<<>>><<>>><<<<>>><<><>>>><<<<><<<><><<>>><<<<>><<<<>>><<<<>>><<>>><<<<><>>><>>>><<<<>><<<>>>><><<<<><>>><<<<>>><<<>>>><<<>>><<<<>>>><<<<><>><>>><<>>><<<><<<><<<><<<><<>>><<>><<>><<>>>><><<<>>><<><<<<><<<<>><<<>>>><<>><<>>><<<<>><<<>><<<<>>>><<<<>>>><>><<><<<>><<<>>><<>><>>><<>>>><<<>>><><<>>>><<>>>><<<>>>><<<<>>><<>>><<<<><<<<><>>><><<<<>><<<<>>><<>>><>>><<>>>><<<<>><<<><<>><>>>><<<>>><<<<>><<<<><<<<>>>><<<><<<>><<>>>><<<>><>>>><<<>>>><<<<>>>><<<><<<><<<<>>><<>>><<<>>>><<>>>><<<>>><<><>>>><<<>><>>>><<<<><<<<>>><>>><>>>><><<<>>>><<>>><>>><<<<>><<>>><<<><<<<>><<<>>>><<<<><<<<>>>><<<<>><>>><<>>>><<<>>><>>>><>>><<<<>>><<<>>><<<><<>>><>>>><<>>><<>>><<>>><<<>>><<<<>>><>><<<>>><<<<>>><<<>><<<>><<><>><<>><<<<>>><<<>>>><<>>><<>>><<>>><<>><<<>>><<<<>>><<<<>>><<><<<>>><<>><>><<<<>>><>>><<<>>><<<><<<<>>><<<>>><>>>><<<>><<<<><>>><<<>>><<<<>><<<>>>><<>>>><><<<<>>>><<<<>>>><>>><<<>>><<<<><>><<>>>><><>><<<<>>><<<<>>><<>>>><<<<>>><<<>>>><>><<<<>>>><<><<><<<<>><<<<>><<<<>><<<<>>><<>><<<<><<><<>><<<>>>><<<>>>><>>><<>>><>>>><<<<><><<><>>>><<>>>><>>>><><<><<<>><<<><<>>><<><<><<<>>>><<>>>><<<<>>>><>>>><<>>>><<>>><<<><<<<>><<<<><>>><<<<><<>>>><<>>><<>>>><<<<>>><<<>>><<>>><<<>>><<<>>>><<<<><><>>><<<<>>>><<>><<<<>><>><<>>><<<<>>><>><<>>>><<<>>>><<<<><<<>>><<<<>>><>><<<<>>><<<<>>><<<>><<<<>>><<<>>><<>><<<>>>><<<>>><><<<><<<><<<<>><<><<<>>><<<<>>><<<<><<<<><<<<>><<<>>>><<><<>><<<><><<>>>><<<>>><<>>><<<<>>><<><>>><>>><<<><<<<>>><<<<><<>>><<<<>><<>>><<<<>>><><<<>>><<<><>><<<<>>>><<<<>><<<<>>>><<>>><<<<>>>><<<><<<<><<<>>>><<<<>>>><><<<>><<<>>>><<><<<<>><<<>>><><<>>>><<>>>><<<<><>><<<>>>><><<<>>>><><<<><<<>><>>>><<<>><>>>><><>>><<<><<>>>><<>>>><<><>><<>><<>>>><<<<>>>><<<>><<<>>><<<>>>><<>>><<<>>>><<<<>>><<<<>><<><>><<<>>>><<<<>>>><>>>><<<<><<>>>><<<<>>><>>><>>>><<<>>>><<<>>><<<>>>><<<>>><<<<><><<<>>>><>><<<><>>>><<<><<<<><<<>>><><<>>><<<<>><<<>>><<<><<<>>>><<<<><<<<><<<><<<>><<<<>>>><<>><><<<>>><<<<>>>><<<>>><<>><<<>><<<>>><<<><<<<><<<<>>><<>>><><>>>><<<>>>><<>>>><<<<><>>><>>>><<<>>>><<<<>><>>>><<>><<>>>><<<<>>>><>>><<><<<<>>><<<><>><>><<<><<<<>><<<>><><<<<>><>>>><<>><<<>>><>>><<>><<>>><><<<<><<<<>><<<<>>>><<>>><<>><><<<<>>>><<><<<>>>><<<<><<<<>><<>><<<>><>><>><<<>><<<<><>><<<<><<>>>><<<<><>><>><>>>><>><<<<><>><>>>><<<>>>><<<<>><<<<><<<<>>>><>>><<<><>><<>>>><<>>>><<<>><<>><<<<>>><><<<><<<<><<<<>>><<>>>><>>><>>>><<>>>><<<><<<<>><<>>>><<>>>><<<>>><<><<><<>>>><<>>><<<><<<>>>><<<><>>><<>><><<>><<<>>>><<><<<<>><<><<<>><>>><<<>>>><<<<>>>><<<>>>><<<>><<>>>><<><>>>><<<><<>>><<<<>><<<><<<>>><<>>><>>><<>>>><<>><<><>><<<<>>><><><<<<>>>><<>><<<>>>><>>><<<>>><<<<><<>>><>><<<<>>>><>>><<<<>>>><<<<>>>><<<<>>>><<<>><>><<<>>>><<<><<<<>>>><<><<>><<<<>>><<>>>><<<<><<<<>>>><<<<><<<>>><<<>>>><<<<>>>><>>>><>>>><<<>>><<<>>><<<<>>><<<>><<<>>>><<>><<>>>><>>>><>>>><<<>>><>>>><>>><<<<>>><<<<>>>><>>><>>><>><>>><<<>>><<<<>>><<<<><>><<<><>>><<>><<<>>>><<<>><><<<>>><<<><<>><>>>><<<>>><><<><>>><<<<>><<<<><<<>>>><<<>>><><<<<>>><<<><<><<<>>><<><<>>>><<<>>>><<><<<>>>><>>><<>><<<><<<>>>><<<<>><>>>><<>>><<<<>>><<><>>>><<<<>>><<<>>><<><<<<>>><<<<>>><<<<>>>><<<>>>><>>><<<>>><<>><<<>>>><<<><><<<<><<<<>>>><<>>><>>><<<<><<<>><<>>>><><<<><<>>><<<<>>><<>>><<<<><<<>>><<<>>>><>>><>>><<><><<>><<>>><<<<>>><<>><<<>>>><>>>><>><<><<<>>><<><<<<>>>><<>>>><<<<>><<>>><<<<><<<<>>><<>>><<<<><><>>>><<<>>><<<<>>><>>>><<<>><<<>>>><<<<><<<>>>><<><<>>>><<>><<<<>><<<>>><<<>>>><<<<><<>><>>><<<>><<<>>>><<<<>>><<>><<<<>><>>><<>>><<<>>><>><<<>>>><<>>>><<<<>>><<>>><>>><>><>>>><>>>><<>>>><>>><<<><>>>><<<<>>><<<<>>><<<<>>><<<>>>><<>>>><>>><<<>>><<<<>><<<<>><<>>>><<<<><<>>><<<<><<<><<<><<>>>><<<>><<><<>>><<<>>><<>>><<>>>><>>>><><<<<><>>><<>>><<><<<><<<>>><<<>>>><<<>>><>><>>>><<<>>>><<<>>>><>><>>>><<<<>>><<<>>><<<<>><<>><<>>><<<<>>>><<<>>><<><<<<>><>>>><>><<>>>><>>><>>><><<<<>>><<<<>>><<<<><<<<>>>><<<<><<>>>><<<<>>>><<<<>>><<<>>><<>><<>><<<>>><>>>><>>>><<<<>>>><<<>>>><<<<>>>><<<>><<<>>><<<>><<<<>><<>>><<>>><<<<>><<<<><<<<>>>><<<<>>>><<>><<<>>>><><>>><<><<>><<<>>><>>><<>>>><<><>>><<><<>>><<>>>><><>>>><<<<>>>><<<><<>><<>>><<<<>>>><<<<>><<<<>><<>><<><<>><<<>>>><<<<><><<<<>>>><><<>>>><>>><>><<<<>><<<><<<>><<>>>><><>>>><<>><<>>><<<<><<<>><<<<>>><<<<>><<<<>><<<>><<<<><<<>>><<>>><<<<>>>><>>>><<>><<>>>><<>>>><<>>><>>><<<><><<<><<<>><><>>>><<<<>>><<<><<<>><<><<<<><<<<><<><<<<>>>><>><<<<><<>>>><>>>><<<>>><>>><><<<<>><<<>><<>>>><<<<><>>>><<<>>>><<<>><>>>><<>>>><<<>>><<>>><<<>><<<><<<<>>><><<>>>><<<>>><<>>>><>>>><>>><<<>>>><<<>><>><<<<>>><<<>>><><<<><<>><<<>>><<<<><><<<<>>>><<>>>><<<>><<<>><<>>><>><<<>><<<>>><<<><<<>><<>><<>>><<<<>>><<><<<><<>><<<>>><>>><<>><<>><<<<>>>><<><<<<>>><<>>><>>><<><>>>><<<<>><<>>>><>><<<<>>><<><<<>>>><<<><>>>><<<>>><<<><<<>><<<>><<<<>><><<<<>>><>>><<>>>><<<>>><<<>>>><<<<>>><<<<>>>><<<>>>><>>><<<<>>>><>>><<<<><<>>><<>><<<<>><><<>><<<<>><<<>><<><<>>>><><<<<>>><<><<><<<>>>><<<>>>><<><<<>>>><<<><>>>><>><<><<<<>>><>><<<><>><<<>>>><<<><<><<<>>>><<>>><<<<><<><<<>><<<><<<<>>>><<<>>><<<<><<<>><<<>>>><>>>><<<<>>>><<<>>><<<<>>>><<<>><<>><<>><>>>><<<<>><<<><>><<<<><<<<><<>><<<>>><<>>>><<><>>>><<<<>><<><<<>>><<<><<<<>>>><<<>>>><<<>>><<<>>><<<<>>><<<>>><<>><<<>>><><><<<>><>>>><<<<>><<>>><<><<>>><<<<>><<>><><<<<>>><<>>>><<><>><<>>><<><<<>>><<>>>><><>><<><<>><<><<<<>>>><<>>>><>>>><<<<>>>><>><>><<<>>>><<>>>><<><>>>><<<<>>>><<<<>>><<<<><<<<>><<>>>><<<><<<>><<<<><<<<>><<<><<>>>><>><<>>>><<<>>>><<>>><<<<>><<<<><<>>>><>>>><>><><<>><<><<<><<>><<<>>><<<>>>><<<<>>><<<<>>>><<<><>>><<>><<<><<<<><<>>><<<<><<<><<<>><<>>>><><<><<<<>><>><<<>><<<<>>><<<<>>><>>><<<><<<>><<>>><<<>>><<<>><<<<>>>><<<>><<<>><<<<>>><>>>><>><<>><<>><<<>><<>>>><<<<><>><<<>>>><<<<>><<<<><<<<>>><<<<>>><<<<>>><<>><<<><<<>>><<<>><<>>><<>>><<>>>><<>>><<>><><><<<>><<<>>><<<><<>>><>><<><<<<>>>><<<>><>>><<>><>>><<<>>><<<>>><<<>>><>><<>><<>>><><<<>><<>><<>>>><<<<><>>>><>>>><<<<>>><<>>><<<>>><><>><<<<><>><<<>>>><<<>>>><<<<><<<>>><>><<>>>><<<><>>>><<<>><<<>>><<<<><<><<<>>><<><>>>><<<>><<<<>>>><<<<><<<<>>>><<><<<>><<<>>>><>>><<><<>><<>>><>>><<<><<<<>>>><<<<><<<<>><>><>>>><<<>>>><<<><<>>>><><<<<>><<<>><<><<<><<<>>><<<>><<<>>>><<>>><<<<>><<>>><>><<<<>>>><<<<>><>><<>>>><<>>>><<<>>><>>>><<<><<<<>>>><<><<>>><<<<>><<<>>><<<>><>><<<>>><<>>><<><>>>><>>><><>>><<>><>>><<>><<<<>><>><<>><><<<>>>><<>>><<>>>><<<>><<>><<<<>><<<><<<<>><<<<>><>>><<>>>><<<<><<>>><<<><>><<<><<<>>>><<<<>>><>><<<<>>>><<<<>>><<<<>>><>>>><<>>>><<<<>>><<><<><>><><>>>><<<<>><<>>><<><<<>><>>><>>><<<<>>>><<>>><<<><<>>><<<>><<<<><><><<><<<><>>><>>>><>>><>>><<>>>><<>>><<<<>>>><<><>><<>>>><<<><<<>>>><<<>>>><<<<>>>><<<<><<<>>><<<<>>><<<>>><>><<<>>><<>>><<<>>>><>>>><<>><<>>><>><<<<>>>><<<<>><>>>><><<<>>>><>>><<>>>><<<>><<<<><>>>><<<<>><<>><>>><><<<<>>>><<<<>><<<>><>>>><<<<>>>><<<><<<><<<<>>><>><><<<>>>><<>>><<<>><<>>><<>><<>><<<<><<<><><>><>>><<<<>>>><<>>>><<<>><>>>><<<<><>><<>>><<>>>><<>>>><<<<>>><<<><<>><<><>>><>><<>><<<<>>>><<<>>>><<<>>><<>>>><<<<><><<>>>><<<><<>>>><<<><<<<>><<<<>>><<>>><>><<<<><<<>><<<>>>><<<<>>><<<<>><<<>>>><<<<>>>><<<>><>>><>><<>>><<>>>><<<<>><<><<><<>>><>>><<<>>>><<<><<<>><<<>><<<>><<>><<<>>>><<<>>>><>>>><>><<<<>>>><<><<<<>>><>>>><<>>><<<>>>><<<>>><<<<>>>><>>><><<<<>>><<<<>>>><><<<>><><>><<<><<<>>>><<>>>><<<<>>>><>>>><<>>><<<<>><<<><<>>><<<<>><<<<>><>><<<<>>>><<<>>><<<<>>>><<<>>><<>><<<>><<>>><<>>>><<<>>><>>>><<<<>><<<<>>>><>><<<>><<<<>><<>><<<>>>><<<>>><<<>>>><<<<>><<<><><>>><<<<><<<>>>><<<>>><<<<>>>><<<>>>><<>><<><<<>>><<>><><<<>>>><<>><<<>>>><<<>>><<<<><<>>>><<<<><><<<><><<<<>><<><<<><<<>><<>><<>><<>><>>><>>>><><><<<>><<>><<<>><<<<>>><<>>>><<<<>>><<<>><>>><<<>><>>>><<<>>><<<>><<<<>>><<>>>><>>>><<>>><<<><<<>>><<<<>>>><<<<><<<>>>><<>><<<><<><><>>>><<<<>>><>>><<<<>><<<>><<<>>>><<<<>>>><<<>><<<<>>>><<<>>><>>><<<><<<<>>><<<<>><<<>>><<<>><<<<>>>><<<>>><<>>><>>>><<<<>><<>>>><<<<>>>><<>><<>><<<<>>>><<<>>><<<><<<>>>><<<<>>>><<<>>>><<>>>><<<<>>><<>>><<<><<<<>>>><>>>><<>>><<>>><<<<>><<<>><><<>>><>>>><<>>><<<<>>><>>><<<<>>><<>>><<<<>><<>>>><<<>>>><>><<<>><<<<>>>><><<<<>>>><<<>>><>>>><<>><<<>>><<><<<<>><<>>>><>>>><<>>><<>>>><<<>>><>>>><>>>><>>>><<<<>><<<>><<<<>><<<>>>><>>><<<<>><><<<<>>>><<>>>><<>><>><<>>><<>><>>>`;

interface IRock {
  height: number;
  width: number;
  structure: string[][];
}

const CAVE_WIDTH = 7;
const MAX_ROCK_INDEX = 1000000000000;
// const MAX_ROCK_INDEX = 2022;
const MAX_CAVE_HEIGHT = 5000; // limited due to memory

const POSSIBLE_ROCKS: IRock[] = [
  {
    height: 1,
    width: 4,
    structure: [
      ['.', '.', '#', '#', '#', '#', '.']
    ],
  },
  {
    height: 3,
    width: 3,
    structure: [
      ['.', '.', '.', '#', '.', '.', '.'],
      ['.', '.', '#', '#', '#', '.', '.'],
      ['.', '.', '.', '#', '.', '.', '.']
    ],
  },
  { // this one is flipped upside down on purpose, due to upside down cave structure (simplier index operating)
    height: 3,
    width: 3,
    structure: [
      ['.', '.', '#', '#', '#', '.', '.'],
      ['.', '.', '.', '.', '#', '.', '.'],
      ['.', '.', '.', '.', '#', '.', '.']
    ],
  },
  {
    height: 4,
    width: 1,
    structure: [
      ['.', '.', '#', '.', '.', '.', '.'],
      ['.', '.', '#', '.', '.', '.', '.'],
      ['.', '.', '#', '.', '.', '.', '.'],
      ['.', '.', '#', '.', '.', '.', '.']
    ],
  },
  {
    height: 2,
    width: 2,
    structure: [
      ['.', '.', '#', '#', '.', '.', '.'],
      ['.', '.', '#', '#', '.', '.', '.']
    ]
  },
];

let shouldEnd = false;
let nextMoveIndex = 0;
let nextRockIndex = 0;

const getNEmptyCaveRows = (n: number): string[][] => {
  return Array.from(Array(n), () => Array(CAVE_WIDTH).fill('.'));
}

// const cave = Array.from(Array(MAX_CAVE_HEIGHT), () => Array(CAVE_WIDTH).fill('.'));
const cave = getNEmptyCaveRows(MAX_CAVE_HEIGHT);

const deepCopyRock = (rock: IRock): IRock => {
  return JSON.parse(JSON.stringify(rock));
}

const checkIfRowOverlaps = (rowA: string[], rowB: string[]): boolean => {
  for (let i = 0; i < rowA.length; i++) {
    if (rowA[i] === '#' && rowB[i] === '#') {
      return true;
    }
  }

  return false;
}

const checkIfRockOverlaps = (rock: IRock, minY: number, maxY: number): boolean => {
  for (let y = minY, i = 0; y <= maxY; y++, i++) {
    const caveRow = cave[y];
    const rockRow = rock.structure[i];
    const isOverlaping = checkIfRowOverlaps(caveRow, rockRow);

    if (isOverlaping) {
      return true;
    }
  }

  return false;
}

const moveRockLeftRight = (actualRock: IRock, actualMove: string, rockMinY: number, rockMaxY: number): IRock => {
  const newRock = deepCopyRock(actualRock);

  const couldMove = !newRock.structure
    .map((row: string[]) => actualMove === '<' ? row[0] : row[row.length - 1]) // getting first or last column, depends on the move direction
    .filter((field: string) => field !== '.').length; // filtering empty space from the column, if the result is empty the move is possible

  if (!couldMove) {
    return actualRock;
  }

  // moving rock LEFT
  if (actualMove === '<') {
    newRock.structure = newRock.structure.map((row: string[]) => {
      row.shift();
      row.push('.')

      return row;
    });
  } else { // moving rock RIGHT
    newRock.structure = newRock.structure.map((row: string[]) => {
      row.pop();
      row.unshift('.');

      return row;
    });
  }

  const isOverlaping = checkIfRockOverlaps(newRock, rockMinY, rockMaxY);

  if (isOverlaping) {
    return actualRock
  } else {
    return newRock;
  }
}

// returns: [newRockMinY, newRockMaxY, rockMoved]
const moveRockDown = (actualRock: IRock, rockMinY: number, rockMaxY: number): [number, number, boolean] => {
  if (rockMinY === 0) {
    return [rockMinY, rockMaxY, false];
  }

  const isOverlaping = checkIfRockOverlaps(actualRock, rockMinY - 1, rockMaxY - 1);
  return [isOverlaping ? rockMinY : rockMinY - 1, isOverlaping ? rockMaxY : rockMaxY - 1, !isOverlaping];
}

const mergeRows = (caveRow: string[], rockRow: string[]): string[] => {
  return caveRow.map((caveField: string, index: number) => rockRow[index] === '#' ? rockRow[index] : caveField);
}

const mergeRockWithCave = (actualRock: IRock, rockMinY: number, rockMaxY: number) => {
  for (let y = rockMinY, i = 0; y <= rockMaxY; y++, i++) {
    const rockRow = actualRock.structure[i];
    cave[y] = mergeRows(cave[y], rockRow);
  }
}

const drawCave = (maxHeight: number) => {
  for (let i = maxHeight - 1; i >= 0; i--) {
    console.log(cave[i].join(''));
  }
}

const checkIfHighestPointIsFull = (highestPoint: number): boolean => {
  if (highestPoint === 0) {
    return;
  }
  const filtered = cave[highestPoint - 1].filter((field: string) => field === '#');
  if (filtered.length === CAVE_WIDTH) {
    return true;
  }
  return false
}

let cyclesNumbers: [number, number][] = []; // [highestPointMemo, actualRockIndex] - two cycles needed to calculate the result
const cycleMap = new Map<number, number>();

const calculateScoreAfterCycleFound = (highestPointMemo: number) => {
  const heightInCycle = cyclesNumbers[1][0] - cyclesNumbers[0][0];
  const numberOfRocksInCycle = cyclesNumbers[1][1] - cyclesNumbers[0][1];
  const heightBeforeCycle = cyclesNumbers[0][0];
  const rockIndexAtFirstCycle = cyclesNumbers[0][1];
  const numberOfFullCycles = Math.floor((MAX_ROCK_INDEX - rockIndexAtFirstCycle) / numberOfRocksInCycle);
  const heightAfterAllFullCycles = numberOfFullCycles * heightInCycle + heightBeforeCycle;
  const rocksLeftAfterLastCycle = MAX_ROCK_INDEX - rockIndexAtFirstCycle - (numberOfFullCycles * numberOfRocksInCycle);
  const cycleMapKey = nextRockIndex % numberOfRocksInCycle;
  
  if (cycleMap.has(rocksLeftAfterLastCycle)) {
    return cycleMap.get(rocksLeftAfterLastCycle) + heightAfterAllFullCycles;
  }

  if (!cycleMap.has(cycleMapKey)) {
    cycleMap.set(cycleMapKey, highestPointMemo % heightInCycle);
  }

  return null;
}

const partB = (): number => {
  let highestPoint = 0;
  let highestPointMemo = 0;
  
  while (!shouldEnd) {
    const isHighestFloorFull = checkIfHighestPointIsFull(highestPoint);
    if (isHighestFloorFull && cyclesNumbers.length < 2) {
      cyclesNumbers.push([highestPointMemo, nextRockIndex])
    }
    if (cyclesNumbers.length === 2) {
      const finalScore = calculateScoreAfterCycleFound(highestPointMemo);
      if (finalScore) {
        return finalScore;
      }
    }
    const actualRockIndex = nextRockIndex++ % POSSIBLE_ROCKS.length;
    let actualRock = deepCopyRock(POSSIBLE_ROCKS[actualRockIndex]);
    let rockMinY = highestPoint + 3;
    let rockMaxY = rockMinY + actualRock.height - 1;

    let isRockStopped = false;

    while (!isRockStopped) {
      const actualMoveIndex = nextMoveIndex++ % input.length;
      const actualMove = input[actualMoveIndex];
      actualRock = moveRockLeftRight(actualRock, actualMove, rockMinY, rockMaxY);
      const moveDownResult = moveRockDown(actualRock, rockMinY, rockMaxY);
      rockMinY = moveDownResult[0];
      rockMaxY = moveDownResult[1];
      isRockStopped = !moveDownResult[2];
    }

    mergeRockWithCave(actualRock, rockMinY, rockMaxY);

    const isCurrentMaxBigger = rockMaxY + 1 > highestPoint;
    const diff = (rockMaxY + 1) - highestPoint;
    
    highestPoint = isCurrentMaxBigger ? rockMaxY + 1 : highestPoint;
    if (diff > 0) {
      highestPointMemo += diff;
    }

    if (highestPoint > 4500) {
      cave.splice(0, 4000);
      cave.push(...getNEmptyCaveRows(4000));
      highestPoint -= 4000;
      console.log(`to end: ${MAX_ROCK_INDEX - nextRockIndex}`)
    }

    if (nextRockIndex === MAX_ROCK_INDEX) {
      shouldEnd = true;
    }
  }

  return highestPointMemo;
}

console.log('end', {
  partB: partB()
})

export {};