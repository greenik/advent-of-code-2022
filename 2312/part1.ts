const sampleInput = `.....
..##.
..#..
...#.
.###.
.....`;

const sampleInput2 = `..............
..............
.......#......
.....###.#....
...#...#.#....
....#...##....
...#.###......
...##.#.##....
....#..#......
..............
..............
..............`;

const input = `.###.#.##..#####....#.#..#....###..#......######.#....#.#..#..##.#..##...
#.#....##.####.##..#...####..#.#.##.##.##..#.#..###.#####.###..#####.##.#
.###..##.##..#..#.##..#..#.#.#....#.#.#.###.#..######.#.##.##.###.#..##.#
#.##.......#.#..##..###.####.#..####..#.##..#.#...#.###..##.#####.#......
#..#.#..#.....##.##..####.#......#.#.####.#.####....#.###..#####.###.#..#
#..##.##.##..#..##.#.######.#...#...###.####...#..###.#..###.#####.#..#..
##....###...##.#.#.###.#.##.##.###...#.########..#.####.##.###.###.##.##.
##....#.####.....#.###.#...#...#.#...##......##....####.####.#..##..#####
###..#..##.#..####..######.##.#####..##..##.#..##..######.#...#..###..#..
.#####..##..#.##...#.##..###...........#..#....#..#####.....#....#.#...##
..#.#..#.#.#..#..##.###..##...#.....#..#####.##.##.#..#..###..##.####...#
.###.#.#.###.#..##..###.....#..##..#.#######.#.#.#..#......##..#.#.#.##..
....###..##.##..#....#..#.#......#.#.#..##..#.#...#.#.#.##.#..##..#####..
.#.#.#..##...#.#.##..#.#..#....#.....#.###.#.###..#..#..#......###.#.#..#
#.##.#.#####.#.#..#..###...#..####...#######...########...##..#.##.######
...##..####.##...#..#.##.#..#.###..........##.#######....#....#####..##.#
#.#..##...#..##.##.#.#.......##..##...#..#....##.#..#..#..##..##.#.#####.
##..##....####...#..####....##.#.#.##.#.#.##...#.##.#.#######.##.##...###
...###..##.#####..######.####...###..###...##.#..##....#.#..#...##..#...#
...####.#..###.###...#...#.##.#.#..####...##.#.##...######..#.#.......#.#
..##.##...#.##..###..###.#..#.###.#.#.#..#..#.###.#..#..#.###...##..####.
#.##....##..#..#.###.##.#........#..##...#.#.###.#...#.##.#.##.##.#.#.###
....#...###..........#....##.##..##..#.####.#..#....#...#.##...#..###...#
.##.###..#.#..#..##....##..#..#.##....#.....##..###.##########.##..##..#.
##.###.#####...#..#.#..#.#...#.#....####..####.######.##.#..#..#.#.#.###.
###......#..#.#...#.#....######.##.#.#.##.....#.##..###.......###.####...
.###.##.###..#..#####...###.##..#..####.##.#.#.#..#..#..#..#.##.#.####.#.
##.###...#..#.....#.######.......#..#..#....#.###.####..##..####.#.#..#..
#..#.####.....###...###.#.#..##..#.#.##.#..#.#.##.#....######.##.####...#
.#..#.#..#..##..#.....####.#.##.#######.#.#.#.##...#.#.#..#...###..##...#
.##....##.###.#....##.####.....##..#..##..###.#...#....#.##......#....###
#.###.#.#.#.##.##....##.#.##......####..###.#.###..#...#.#..#...#..#.####
#..##..#.#.#.#....##.#.#####.##...#.######...###.#.#.##.#.#.#.##..##.####
.#....####....#.###.####..#.#.#..#.##..###..##...####..#..########.##....
#.####....###.#...##..#....####.##.###..###.#.#..##..#.####...########..#
##.#.#.#.###...................#..#.####.##.....#.##..#..##.#..##.##....#
##.#..########..#..###.#.#.#....###.###..###..#.#.#...##..#.#....#.##.#..
.###.###.####.##..#.###...#..#########.####.###.#..####..#.##..#..#..####
..#..#.##.#...#.#.###..#.....#....#...#.......#...###.#..#..##..####.#..#
##...#..#....#..#...###.#...##.....###.##....#....#.#.....#..#....#.#...#
##...#...#.#.##.#..#...#.##..#..#..#.##...##..####.#.##...#..##########..
.##.#.#..#..##.##..#.#.#.#######..#.#..##.##...##.#.#.###..#.#.##..##..#.
..#.#.##...#..##.##.#.#.##.###..####.#....######.####.##...#...####....#.
#....#..#.########..#.#..#...#......#.#.#..#.##.##.#..#.#..#.#..##..##.#.
#.#.###.#..#.#.###.#.#..##.#.#.##.###..#..#......#.##..#.#.####.#.#.#####
#..####..#...###.#####..##..#.#..#.....####....#.###.##.####..##.#.#...#.
##..#.#.#.#..##.#.####.......##..###..#....##.#.###...###..#####..#...#..
######..#.#.##.##.#.#...#.##.##..##.....##.#.#..#....#.#..##...#....###.#
.#.###...#...#..#..####.##.##.###.##..#....#....###..#.#...###.#..#.##.##
#.##.###.#.##..####..#.#.....#.#..#..#.#.#.#.##....##.###.##....#.##.##.#
####..#..#..#.#...#.#####.####..#...#....##..#......##.###....#####...#.#
##.####..#.#..####......##..######.####.....##..##.#.#..##.#.#..##.#.....
...####.#.###.###..#...##....#..#..#...##..#####..#####..##..###...###...
..##.##.##.....#.#..##.#.....##.....##.####..###.##.###.###.#.#..#.####..
##.##.##.##.#.....##..####..##..##.##..######.#.##..##..#...#.#.....#...#
.....#..#..######..##.####.#####...#####.#.###..##.#####.##.##.#..#..###.
..###.###.##.##.###..#.#.###.#.##.#####.#.##.######....#..#.###..#.###..#
#..#.##..#...###.....#.#.####.#.#.##..#......#.##...#....##.#.##....#.#.#
.#..##..####...#..##.#...###.##.##...#.######......#.##.######..##.#..##.
...###..#.##..###...##..#.#.##.#..#.##.#.##.#.#.##.##.#.##.##...###.....#
...#####......####.#.#.###..#.#...#.#...##..#.#...#####...#..#..#..##.##.
#.###.#.###.##.##.###.#...##.#.###.####.#.##.##.###...#.#.....#......#.##
##.#...##..####.#..#..#..#..#.#...##..#...#.#.######......#.#...#.##..##.
...###....#.##...#...#.....#..#...###.#.#..##..##.###.#..###..##.##.#..##
..#####..#..####...##...#.#.###.#.#.##..#.#.#......###.#...#...#..#.##...
##..##.....####..####..#.#...#.#.#....#.....#..##.#.##.#.##.####.........
.###...###..#..##.#..#.##..#..#.###..####..#.#......###......#..######.#.
#.....###..#...###...#####.....####.####..#####..#.#...##..#.#...#.#.####
...##..#..##...#....##.#.#....##...#.###.#..#####.#..######.....##..#.###
#.##..##.##.#..##.#.##.##########.#.....####.##.###..####..#....#..#...#.
####..#..#..##.##.#..#...####.###....#.##.#.#.#.###..##..##......#.##.##.
.##......##..##.####.#....#.#.##.##.###.#.#.#....#.#.......#...##.###.##.
#####.#.#..##..#...#...##..##...#.#.....####.#.###.##..#...##..#..##.#..#`;

interface Move {
  move: [number, number];
  moveStr: string;
  possibleAdjecents: [number, number][]
}
type Elf = [number, number];

const rows = input.split('\n');
const movesArray: Move[] = [
  {
    move: [-1, 0],
    moveStr: 'N',
    possibleAdjecents: [
      [-1, -1],
      [-1, 0],
      [-1, 1]
    ]
  },
  {
    move: [1, 0],
    moveStr: 'S',
    possibleAdjecents: [
      [1, -1],
      [1, 0],
      [1, 1]
    ]
  },
  {
    move: [0, -1],
    moveStr: 'W',
    possibleAdjecents: [
      [-1, -1],
      [0, -1],
      [1, -1]
    ]
  },
  {
    move: [0, 1],
    moveStr: 'E',
    possibleAdjecents: [
      [-1, 1],
      [0, 1],
      [1, 1]
    ]
  }
];

const elves: Elf[] = [];
rows.forEach((row: string, index: number) => [...row.matchAll(/#/gi)].forEach(occurence => elves.push([index, occurence.index as number])));

const getElfAfterMove = (elf: Elf, move: Move): Elf => {
  return [elf[0] + move.move[0], elf[1] + move.move[1]];
}

const getMoveForElf = (checkingElf: Elf, move: Move): Move | undefined => {
  for (let moveAdjIndex = 0; moveAdjIndex < move.possibleAdjecents.length; moveAdjIndex++) {
    const adjMove = move.possibleAdjecents[moveAdjIndex];
    const checkingElfAfterMove: Elf = [checkingElf[0] + adjMove[0], checkingElf[1] + adjMove[1]];
    const adjecents = elves.filter((elf: Elf) => elf[0] === checkingElfAfterMove[0] && elf[1] === checkingElfAfterMove[1]);
    if (adjecents.length > 0) {
      return undefined;
    };
  }
  return move;
}

const shouldElfMove = (elf: Elf) => {
  const allAdjecents: [number, number][] = [
    [-1, -1],
    [-1, 0],
    [-1, 1],
    [0, -1],
    [0, 1],
    [1, -1],
    [1, 0],
    [1, 1]
  ];
  const customMove: Move = {
    move: [0, 0],
    moveStr: '',
    possibleAdjecents: allAdjecents
  };

  return !getMoveForElf(elf, customMove);
}

const moveAllElves = () => {
  const elfMoveDict: Record<number, Elf> = {};
  
  elvesLoop:
  for (let elfIndex = 0; elfIndex < elves.length; elfIndex++) {
    const elf = elves[elfIndex];
    if (!shouldElfMove(elf)) {
      continue;
    }
    for (let moveIndex = 0; moveIndex < movesArray.length; moveIndex++) {
      const move: Move = movesArray[moveIndex];
      const moveForElf = getMoveForElf(elf, move);
      
      if (moveForElf) {
        elfMoveDict[elfIndex] = getElfAfterMove(elf, moveForElf);
        continue elvesLoop;
      }
    }
  }

  Object.entries(elfMoveDict).forEach(([elfIndex, elfAfterMove]: [string, Elf]) => {
    const occurences = Object.values(elfMoveDict).filter((elf: Elf) => elf[0] === elfAfterMove[0] && elf[1] === elfAfterMove[1]);

    if (occurences.length === 1) {
      elves[+elfIndex] = elfAfterMove;
    }
  });
  movesArray.push(movesArray.shift()!);
}

const findMinMaxes = () => {
  let minRow = Number.POSITIVE_INFINITY;
  let maxRow = Number.NEGATIVE_INFINITY;
  let minColumn = Number.POSITIVE_INFINITY;
  let maxColumn = Number.NEGATIVE_INFINITY;
  elves.forEach((elf: Elf) => {
    if (elf[0] > maxRow) maxRow = elf[0];
    if (elf[0] < minRow) minRow = elf[0];
    if (elf[1] > maxColumn) maxColumn = elf[1];
    if (elf[1] < minColumn) minColumn = elf[1];
  });
  return [minRow, maxRow, minColumn, maxColumn];
}

const calculateResult = () => {
  const [minRow, maxRow, minColumn, maxColumn] = findMinMaxes();
  const rows = Math.abs(maxRow - minRow) + 1;
  const columns = Math.abs(maxColumn - minColumn) + 1;
  const result = (rows * columns) - elves.length;
  return result;
}

for (let i = 0; i < 10; i++) {
  moveAllElves();
}

calculateResult();

console.log('end', {
  elves,
  result: calculateResult()
});

export {};